--- x265/source/CMakeLists.txt
+++ x265/source/CMakeLists.txt
@@ -42,9 +42,12 @@
 string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" SYSPROC)
 set(X86_ALIASES x86 i386 i686 x86_64 amd64)
 list(FIND X86_ALIASES "${SYSPROC}" X86MATCH)
-set(POWER_ALIASES ppc64 ppc64le)
+set(POWER_ALIASES ppc ppc64 ppc64le)
 list(FIND POWER_ALIASES "${SYSPROC}" POWERMATCH)
-if("${SYSPROC}" STREQUAL "" OR X86MATCH GREATER "-1")
+if("${SYSPROC}" STREQUAL "")
+    set(POWERMATCH 1)
+endif()
+if(X86MATCH GREATER "-1")
     message(STATUS "Detected x86 target processor")
     set(X86 1)
     add_definitions(-DX265_ARCH_X86=1)
@@ -94,11 +97,11 @@
     endif(NO_ATOMICS)
 endif(UNIX)
 
-if(X64 AND NOT WIN32)
+if(NOT WIN32)
     option(ENABLE_PIC "Enable Position Independent Code" ON)
 else()
     option(ENABLE_PIC "Enable Position Independent Code" OFF)
-endif(X64 AND NOT WIN32)
+endif(NOT WIN32)
 
 # Compiler detection
 if(CMAKE_GENERATOR STREQUAL "Xcode")
@@ -149,10 +152,13 @@
 
 if(INTEL_CXX AND UNIX)
     set(GCC 1) # treat icpc roughly like gcc
+    message(STATUS "Detected icpc compiler")
 elseif(CLANG)
     set(GCC 1) # treat clang roughly like gcc
+    message(STATUS "Detected clang compiler")
 elseif(CMAKE_COMPILER_IS_GNUCXX)
     set(GCC 1)
+    message(STATUS "Detected gcc compiler")
 endif()
 if(GCC)
     add_definitions(-Wall -Wextra -Wshadow)
@@ -166,11 +172,6 @@
         else()
             add_definitions(-march=native)
         endif()
-    elseif(X86 AND NOT X64)
-        add_definitions(-march=i686)
-    endif()
-    if(ARM)
-        add_definitions(-march=armv6 -mfloat-abi=hard -mfpu=vfp)
     endif()
     if(FPROFILE_GENERATE)
         if(INTEL_CXX)
@@ -258,21 +259,10 @@
             endif()
         endif()
     endif(ENABLE_AGGRESSIVE_CHECKS)
-    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE CC_VERSION)
+    execute_process(COMMAND ${CC} -dumpversion OUTPUT_VARIABLE CC_VERSION)
 endif(GCC)
 
-find_package(Yasm)
-if(YASM_FOUND AND X86)
-    if (YASM_VERSION_STRING VERSION_LESS "1.2.0")
-        message(STATUS "Yasm version ${YASM_VERSION_STRING} is too old. 1.2.0 or later required")
-        option(ENABLE_ASSEMBLY "Enable use of assembly coded primitives" OFF)
-    else()
-        message(STATUS "Found Yasm ${YASM_VERSION_STRING} to build assembly primitives")
-        option(ENABLE_ASSEMBLY "Enable use of assembly coded primitives" ON)
-    endif()
-else()
-    option(ENABLE_ASSEMBLY "Enable use of assembly coded primitives" OFF)
-endif()
+option(ENABLE_ASSEMBLY "Enable use of assembly coded primitives" OFF)
 
 option(CHECKED_BUILD "Enable run-time sanity checks (debugging)" OFF)
 if(CHECKED_BUILD)
@@ -484,9 +474,7 @@
         target_link_libraries(x265-shared ${EXTRA_LIB})
     endif()
     if(LINKER_OPTIONS)
-        # set_target_properties can't do list expansion
-        string(REPLACE ";" " " LINKER_OPTION_STR "${LINKER_OPTIONS}")
-        set_target_properties(x265-shared PROPERTIES LINK_FLAGS "${LINKER_OPTION_STR}")
+        set_target_properties(x265-shared PROPERTIES LINK_FLAGS "${LINKER_OPTIONS}")
     endif()
 endif()
 
@@ -502,7 +490,7 @@
     if(PLIBLIST)
         # blacklist of libraries that should not be in Libs.private
         list(REMOVE_ITEM PLIBLIST "-lc" "-lpthread")
-        string(REPLACE ";" " " PRIVATE_LIBS "${PLIBLIST}")
+        set(PRIVATE_LIBS "${PLIBLIST}")
     else()
         set(PRIVATE_LIBS "")
     endif(PLIBLIST)
@@ -561,9 +549,7 @@
     endif()
     set_target_properties(cli PROPERTIES OUTPUT_NAME x265)
     if(LINKER_OPTIONS)
-        # set_target_properties can't do list expansion
-        string(REPLACE ";" " " LINKER_OPTION_STR "${LINKER_OPTIONS}")
-        set_target_properties(cli PROPERTIES LINK_FLAGS "${LINKER_OPTION_STR}")
+        set_target_properties(cli PROPERTIES LINK_FLAGS "${LINKER_OPTIONS}")
     endif()
 
     install(TARGETS cli DESTINATION ${BIN_INSTALL_DIR})
--- x265/source/common/CMakeLists.txt
+++ x265/source/common/CMakeLists.txt
@@ -13,79 +13,7 @@
     endif(LINKED_12BIT)
 endif(EXTRA_LIB)
 
-if(ENABLE_ASSEMBLY)
-    set_source_files_properties(threading.cpp primitives.cpp PROPERTIES COMPILE_FLAGS -DENABLE_ASSEMBLY=1)
-    list(APPEND VFLAGS "-DENABLE_ASSEMBLY=1")
-
-    set(SSE3  vec/dct-sse3.cpp)
-    set(SSSE3 vec/dct-ssse3.cpp)
-    set(SSE41 vec/dct-sse41.cpp)
-
-    if(MSVC AND X86)
-        set(PRIMITIVES ${SSE3} ${SSSE3} ${SSE41})
-        set(WARNDISABLE "/wd4100") # unreferenced formal parameter
-        if(INTEL_CXX)
-            add_definitions(/Qwd111) # statement is unreachable
-            add_definitions(/Qwd128) # loop is unreachable
-            add_definitions(/Qwd177) # declared function is unused
-            add_definitions(/Qwd185) # dynamic initialization in unreachable code
-            add_definitions(/Qwd280) # conditional expression is constant
-        endif()
-        if(X64)
-            set_source_files_properties(${SSE3} ${SSSE3} ${SSE41} PROPERTIES COMPILE_FLAGS "${WARNDISABLE}")
-        else()
-            # x64 implies SSE4, so only add /arch:SSE2 if building for Win32
-            set_source_files_properties(${SSE3} ${SSSE3} ${SSE41} PROPERTIES COMPILE_FLAGS "${WARNDISABLE} /arch:SSE2")
-        endif()
-    endif()
-    if(GCC AND X86)
-        if(CLANG)
-            # llvm intrinsic headers cause shadow warnings
-            set(WARNDISABLE "-Wno-shadow -Wno-unused-parameter")
-        else()
-            set(WARNDISABLE "-Wno-unused-parameter")
-        endif()
-        if(INTEL_CXX OR CLANG OR (NOT CC_VERSION VERSION_LESS 4.3))
-            set(PRIMITIVES ${SSE3} ${SSSE3} ${SSE41})
-            set_source_files_properties(${SSE3}  PROPERTIES COMPILE_FLAGS "${WARNDISABLE} -msse3")
-            set_source_files_properties(${SSSE3} PROPERTIES COMPILE_FLAGS "${WARNDISABLE} -mssse3")
-            set_source_files_properties(${SSE41} PROPERTIES COMPILE_FLAGS "${WARNDISABLE} -msse4.1")
-        endif()
-    endif()
-    set(VEC_PRIMITIVES vec/vec-primitives.cpp ${PRIMITIVES})
-    source_group(Intrinsics FILES ${VEC_PRIMITIVES})
-
-    set(C_SRCS asm-primitives.cpp pixel.h mc.h ipfilter8.h blockcopy8.h dct8.h loopfilter.h)
-    set(A_SRCS pixel-a.asm const-a.asm cpu-a.asm ssd-a.asm mc-a.asm
-               mc-a2.asm pixel-util8.asm blockcopy8.asm
-               pixeladd8.asm dct8.asm)
-    if(HIGH_BIT_DEPTH)
-        set(A_SRCS ${A_SRCS} sad16-a.asm intrapred16.asm ipfilter16.asm loopfilter.asm)
-    else()
-        set(A_SRCS ${A_SRCS} sad-a.asm intrapred8.asm intrapred8_allangs.asm ipfilter8.asm loopfilter.asm)
-    endif()
-
-    if(NOT X64)
-        set(A_SRCS ${A_SRCS} pixel-32.asm)
-    endif()
-
-    if(MSVC_IDE OR XCODE)
-        # MSVC requires custom build rules in the main cmake script for yasm
-        set(MSVC_ASMS "${A_SRCS}" CACHE INTERNAL "yasm sources")
-        set(A_SRCS)
-    endif()
-
-    enable_language(ASM_YASM)
-
-    foreach(SRC ${A_SRCS} ${C_SRCS})
-        set(ASM_PRIMITIVES ${ASM_PRIMITIVES} x86/${SRC})
-    endforeach()
-    source_group(Assembly FILES ${ASM_PRIMITIVES})
-endif(ENABLE_ASSEMBLY)
-
-# set_target_properties can't do list expansion
-string(REPLACE ";" " " VERSION_FLAGS "${VFLAGS}")
-set_source_files_properties(version.cpp PROPERTIES COMPILE_FLAGS ${VERSION_FLAGS})
+set_source_files_properties(version.cpp PROPERTIES COMPILE_FLAGS ${VFLAGS})
 
 check_symbol_exists(strtok_r "string.h" HAVE_STRTOK_R)
 if(HAVE_STRTOK_R)
--- x265/source/test/CMakeLists.txt
+++ x265/source/test/CMakeLists.txt
@@ -28,6 +28,6 @@
     if(EXTRA_LIB)
         list(APPEND LINKER_OPTIONS "-L..")
     endif(EXTRA_LIB)
-    string(REPLACE ";" " " LINKER_OPTION_STR "${LINKER_OPTIONS}")
+    set(LINKER_OPTION_STR "${LINKER_OPTIONS}")
     set_target_properties(TestBench PROPERTIES LINK_FLAGS "${LINKER_OPTION_STR}")
 endif()
