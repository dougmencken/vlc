--- qt/src/widgets/styles/qmacstyle_mac_p_p.h
+++ qt/src/widgets/styles/qmacstyle_mac_p_p.h
@@ -135,8 +135,6 @@
 
 typedef QPair<QCocoaWidgetKind, QAquaWidgetSize> QCocoaWidget;
 
-typedef void (^QCocoaDrawRectBlock)(NSRect, CGContextRef);
-
 #define SIZE(large, small, mini) \
     (controlSize == QAquaSizeLarge ? (large) : controlSize == QAquaSizeSmall ? (small) : (mini))
 
@@ -206,7 +204,7 @@
 
     NSView *cocoaControl(QCocoaWidget widget) const;
 
-    void drawNSViewInRect(QCocoaWidget widget, NSView *view, const QRect &rect, QPainter *p, bool isQWidget = true, QCocoaDrawRectBlock drawRectBlock = nil) const;
+    void drawNSViewInRect(QCocoaWidget widget, NSView *view, const QRect &rect, QPainter *p, bool isQWidget = true) const;
     void resolveCurrentNSView(QWindow *window);
 
 public:
@@ -222,8 +220,10 @@
     mutable QPointer<QFocusFrame> focusWidget;
     CFAbsoluteTime defaultButtonStart;
     bool mouseDown;
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
     void* receiver;
     void *nsscroller;
+#endif
     void *indicatorBranchButtonCell;
     NSView *backingStoreNSView;
     QHash<QCocoaWidget, NSView *> cocoaControls;
--- qt/src/widgets/styles/qmacstyle_mac.mm
+++ qt/src/widgets/styles/qmacstyle_mac.mm
@@ -1853,29 +1853,29 @@
         switch (widget.first) {
         case QCocoaArrowButton: {
             NSButton *bc = (NSButton *)bv;
-            bc.buttonType = NSOnOffButton;
-            bc.bezelStyle = NSDisclosureBezelStyle;
+            [bc setButtonType: NSOnOffButton];
+            [bc setBezelStyle: NSDisclosureBezelStyle];
             break;
         }
         case QCocoaCheckBox: {
             NSButton *bc = (NSButton *)bv;
-            bc.buttonType = NSSwitchButton;
+            [bc setButtonType: NSSwitchButton];
             break;
         }
         case QCocoaRadioButton: {
             NSButton *bc = (NSButton *)bv;
-            bc.buttonType = NSRadioButton;
+            [bc setButtonType: NSRadioButton];
             break;
         }
         case QCocoaPushButton: {
             NSButton *bc = (NSButton *)bv;
-            bc.buttonType = NSMomentaryPushButton;
-            bc.bezelStyle = NSRoundedBezelStyle;
+            [bc setButtonType: NSMomentaryPushButton];
+            [bc setBezelStyle: NSRoundedBezelStyle];
             break;
         }
         case QCocoaPullDownButton: {
             NSPopUpButton *bc = (NSPopUpButton *)bv;
-            bc.pullsDown = YES;
+            [bc setPullsDown: YES];
             break;
         }
         default:
@@ -1884,17 +1884,17 @@
 
         if ([bv isKindOfClass:[NSButton class]]) {
             NSButton *bc = (NSButton *)bv;
-            bc.title = nil;
+            [bc setTitle: nil];
         }
 
         if ([bv isKindOfClass:[NSControl class]]) {
             NSCell *bcell = [(NSControl *)bv cell];
             switch (widget.second) {
             case QAquaSizeSmall:
-                bcell.controlSize = NSSmallControlSize;
+                [bcell setControlSize: NSSmallControlSize];
                 break;
             case QAquaSizeMini:
-                bcell.controlSize = NSMiniControlSize;
+                [bcell setControlSize: NSMiniControlSize];
                 break;
             default:
                 break;
@@ -1907,7 +1907,7 @@
     return bv;
 }
 
-void QMacStylePrivate::drawNSViewInRect(QCocoaWidget widget, NSView *view, const QRect &qtRect, QPainter *p, bool isQWidget, QCocoaDrawRectBlock drawRectBlock) const
+void QMacStylePrivate::drawNSViewInRect(QCocoaWidget widget, NSView *view, const QRect &qtRect, QPainter *p, bool isQWidget) const
 {
     QPoint offset;
     if (widget == QCocoaWidget(QCocoaRadioButton, QAquaSizeLarge))
@@ -1946,10 +1946,9 @@
 
     [backingStoreNSView addSubview:view];
     view.frame = rect;
-    if (drawRectBlock)
-        drawRectBlock(rect, (CGContextRef)ctx);
-    else
-        [view drawRect:rect];
+
+    [view drawRect:rect];
+
     [view removeFromSuperviewWithoutNeedingDisplay];
 
     [NSGraphicsContext restoreGraphicsState];
@@ -2055,10 +2054,10 @@
             QCocoaWidget cw = cocoaWidgetFromHIThemeButtonKind(bdi->kind);
             NSButton *bc = (NSButton *)cocoaControl(cw);
             [bc highlight:pressed];
-            bc.enabled = bdi->state != kThemeStateUnavailable && bdi->state != kThemeStateUnavailableInactive;
-            bc.allowsMixedState = YES;
-            bc.state = bdi->value == kThemeButtonOn ? NSOnState :
-                       bdi->value == kThemeButtonMixed ? NSMixedState : NSOffState;
+            [bc setEnabled: bdi->state != kThemeStateUnavailable && bdi->state != kThemeStateUnavailableInactive];
+            [bc setAllowsMixedState: YES];
+            [bc setState: bdi->value == kThemeButtonOn ? NSOnState :
+                          bdi->value == kThemeButtonMixed ? NSMixedState : NSOffState];
             // The view frame may differ from what we pass to HITheme
             QRect rect = opt->rect;
             if (bdi->kind == kThemePopupButtonMini)
@@ -2135,30 +2134,34 @@
     : QCommonStyle(*new QMacStylePrivate)
 {
     Q_D(QMacStyle);
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
     AutoReleasePool pool;
-
-    d->receiver = [[NotificationReceiver alloc] initWithPrivate:d];
-    NotificationReceiver *receiver = static_cast<NotificationReceiver *>(d->receiver);
-
-    [[NSNotificationCenter defaultCenter] addObserver:receiver
-                                                      selector:@selector(scrollBarStyleDidChange:)
-      name:NSPreferredScrollerStyleDidChangeNotification
-      object:nil];
-
-    d->nsscroller = [[NSScroller alloc] init];
+    if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_7) {
+        d->receiver = [[NotificationReceiver alloc] initWithPrivate:d];
+        NotificationReceiver *receiver = static_cast<NotificationReceiver *>(d->receiver);
+
+        [[NSNotificationCenter defaultCenter] addObserver:receiver
+                                                 selector:@selector(scrollBarStyleDidChange:)
+                                                     name:NSPreferredScrollerStyleDidChangeNotification
+                                                   object:nil];
+        d->nsscroller = [[NSScroller alloc] init];
+    }
+#endif
     d->indicatorBranchButtonCell = nil;
 }
 
 QMacStyle::~QMacStyle()
 {
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
     Q_D(QMacStyle);
     AutoReleasePool pool;
-
-    [reinterpret_cast<NSScroller*>(d->nsscroller) release];
-
-    NotificationReceiver *receiver = static_cast<NotificationReceiver *>(d->receiver);
-    [[NSNotificationCenter defaultCenter] removeObserver:receiver];
-    [receiver release];
+    if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_7) {
+        [reinterpret_cast<NSScroller*>(d->nsscroller) release];
+        NotificationReceiver *receiver = static_cast<NotificationReceiver *>(d->receiver);
+        [[NSNotificationCenter defaultCenter] removeObserver:receiver];
+        [receiver release];
+    }
+#endif
 
     delete qt_mac_backgroundPattern;
     qt_mac_backgroundPattern = 0;
@@ -2542,7 +2545,9 @@
         }
         break;
     case PM_ScrollBarExtent: {
-        if ([NSScroller preferredScrollerStyle] == NSScrollerStyleOverlay) {
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+        if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_7 &&
+            [NSScroller preferredScrollerStyle] == NSScrollerStyleOverlay) {
             switch (d->aquaSizeConstrain(opt, widget)) {
             case QAquaSizeUnknown:
             case QAquaSizeLarge:
@@ -2555,6 +2560,7 @@
             }
             break;
         }
+#endif
         switch (d->aquaSizeConstrain(opt, widget)) {
         case QAquaSizeUnknown:
         case QAquaSizeLarge:
@@ -2745,8 +2751,13 @@
         ret = 1;
         break;
     case PM_ScrollView_ScrollBarOverlap:
-        ret = [NSScroller preferredScrollerStyle] == NSScrollerStyleOverlay ?
-               pixelMetric(PM_ScrollBarExtent, opt, widget) : 0;
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+        ret = (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_7 &&
+                [NSScroller preferredScrollerStyle] == NSScrollerStyleOverlay) ?
+                pixelMetric(PM_ScrollBarExtent, opt, widget) : 0;
+#else
+        ret = 0;
+#endif
         break;
     default:
         ret = QCommonStyle::pixelMetric(metric, opt, widget);
@@ -3078,7 +3089,11 @@
                 || (opt && QStyleHelper::hasAncestor(opt->styleObject, QAccessible::ScrollBar))
 #endif
         ) {
-            ret = [NSScroller preferredScrollerStyle] == NSScrollerStyleOverlay;
+            ret = QSysInfo::MacintoshVersion >= QSysInfo::MV_10_7;
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+            if (ret)
+                ret = [NSScroller preferredScrollerStyle] == NSScrollerStyleOverlay;
+#endif
         }
         break;
     default:
@@ -3926,11 +3941,11 @@
                 cw.first = QCocoaPullDownButton;
                 NSPopUpButton *pdb = (NSPopUpButton *)d->cocoaControl(cw);
                 [pdb highlight:(bdi.state == kThemeStatePressed)];
-                pdb.enabled = bdi.state != kThemeStateUnavailable && bdi.state != kThemeStateUnavailableInactive;
+                [pdb setEnabled:(bdi.state != kThemeStateUnavailable && bdi.state != kThemeStateUnavailableInactive)];
                 QRect rect = opt->rect;
                 rect.adjust(0, 0, cw.second == QAquaSizeSmall ? -4 : cw.second == QAquaSizeMini ? -9 : -6, 0);
                 d->drawNSViewInRect(cw, pdb, rect, p, w != 0);
-            } else if (hasMenu && bdi.state == kThemeStatePressed)
+            } else if (hasMenu && bdi.state == kThemeStatePressed && QSysInfo::macVersion() > QSysInfo::MV_10_6)
                 d->drawColorlessButton(newRect, &bdi, p, opt);
             else
                 HIThemeDrawButton(&newRect, &bdi, cg, kHIThemeOrientationNormal, 0);
@@ -3969,10 +3984,16 @@
             if (hasMenu && (!yosemiteOrLater || bdi.kind == kThemeBevelButton)) {
                 int mbi = proxy()->pixelMetric(QStyle::PM_MenuButtonIndicator, btn, w);
                 QRect ir = btn->rect;
-                int arrowXOffset = bdi.kind == kThemePushButton ? 6 :
+                int arrowXOffset = 0;
+                if (QSysInfo::macVersion() > QSysInfo::MV_10_6)
+                    arrowXOffset = bdi.kind == kThemePushButton ? 6 :
                                    bdi.kind == kThemePushButtonSmall ? 7 : 8;
-                int arrowYOffset = bdi.kind == kThemePushButton ? 3 :
+                int arrowYOffset;
+                if (QSysInfo::macVersion() > QSysInfo::MV_10_6)
+                    arrowYOffset = bdi.kind == kThemePushButton ? 3 :
                                    bdi.kind == kThemePushButtonSmall ? 1 : 2;
+                else
+                    arrowYOffset = bdi.kind == kThemePushButton ? 4 : 2;
                 if (!w) {
                     // adjustment for Qt Quick Controls
                     arrowYOffset -= ir.top();
@@ -3988,10 +4009,17 @@
                 pdi.version = qt_mac_hitheme_version;
                 pdi.state = tds == kThemeStateInactive ? kThemeStateActive : tds;
                 pdi.orientation = kThemeArrowDown;
-                if (bdi.kind == kThemePushButtonMini)
-                    pdi.size = kThemeArrow5pt;
-                else if (bdi.kind == kThemePushButton || bdi.kind == kThemePushButtonSmall)
-                    pdi.size = kThemeArrow7pt;
+                if (QSysInfo::macVersion() > QSysInfo::MV_10_6) {
+                    if (bdi.kind == kThemePushButtonMini)
+                        pdi.size = kThemeArrow5pt;
+                    else if (bdi.kind == kThemePushButton || bdi.kind == kThemePushButtonSmall)
+                        pdi.size = kThemeArrow7pt;
+                } else {
+                    if (arrowRect.size.width < 8.)
+                        pdi.size = kThemeArrow5pt;
+                    else
+                        pdi.size = kThemeArrow9pt;
+                }
                 HIThemeDrawPopupArrow(&arrowRect, &pdi, cg, kHIThemeOrientationNormal);
             }
         }
@@ -4070,7 +4098,10 @@
                     QRect textRect = itemTextRect(
                         btn.fontMetrics, freeContentRect, Qt::AlignCenter, btn.state & State_Enabled, btn.text);
                     if (hasMenu) {
-                        textRect.moveTo(w ? 15 : 11, textRect.top()); // Supports Qt Quick Controls
+                        if (QSysInfo::macVersion() > QSysInfo::MV_10_6)
+                            textRect.moveTo(w ? 15 : 11, textRect.top()); // Supports Qt Quick Controls
+                        else
+                            textRect.adjust(-1, 0, -1, 0);
                     }
                     // Draw the icon:
                     if (hasIcon) {
@@ -4111,7 +4142,7 @@
         if (const QStyleOptionComboBox *cb = qstyleoption_cast<const QStyleOptionComboBox *>(opt)) {
             QStyleOptionComboBox comboCopy = *cb;
             comboCopy.direction = Qt::LeftToRight;
-            if (opt->state & QStyle::State_Small)
+            if ((opt->state & QStyle::State_Small) && QSysInfo::macVersion() > QSysInfo::MV_10_6)
                 comboCopy.rect.translate(0, w ? (QSysInfo::macVersion() > QSysInfo::MV_10_8 ? 0 : -1) :
                                                 (QSysInfo::macVersion() > QSysInfo::MV_10_9 ? 0 : -2)); // Supports Qt Quick Controls
             else if (QSysInfo::macVersion() == QSysInfo::MV_10_9)
@@ -4251,9 +4282,10 @@
             ThemeTabDirection ttd = getTabDirection(myTab.shape);
             bool verticalTabs = ttd == kThemeTabWest || ttd == kThemeTabEast;
             bool selected = (myTab.state & QStyle::State_Selected);
+            bool usingLionOrLater = QSysInfo::MacintoshVersion > QSysInfo::MV_10_6;
             bool usingYosemiteOrLater = QSysInfo::MacintoshVersion > QSysInfo::MV_10_9;
 
-            if (selected && !myTab.documentMode
+            if (usingLionOrLater && selected && !myTab.documentMode
                 && (!usingYosemiteOrLater || myTab.state & State_Active))
                 myTab.palette.setColor(QPalette::WindowText, Qt::white);
 
@@ -4262,7 +4294,7 @@
             // outside world, unless they read the source, in which case, it's
             // their own fault).
             bool nonDefaultFont = p->font() != qt_app_fonts_hash()->value("QComboMenuItem");
-            bool isSelectedAndNeedsShadow = selected && !usingYosemiteOrLater;
+            bool isSelectedAndNeedsShadow = selected && usingLionOrLater && !usingYosemiteOrLater;
             if (isSelectedAndNeedsShadow || verticalTabs || nonDefaultFont || !tab->icon.isNull()
                 || !myTab.leftButtonSize.isEmpty() || !myTab.rightButtonSize.isEmpty()) {
                 int heightOffset = 0;
@@ -4733,6 +4765,14 @@
     case CE_ProgressBarGroove:
         break;
     case CE_SizeGrip: {
+        // do not draw size grips on versions > 10.6 unless it's a QMdiSubWindow
+        if (QSysInfo::MacintoshVersion > QSysInfo::MV_10_6
+#ifndef QT_NO_MDIAREA
+            && !(w && w->parentWidget() && qobject_cast<QMdiSubWindow *>(w->parentWidget()))
+#endif
+            )
+            break;
+
         if (w && w->testAttribute(Qt::WA_MacOpaqueSizeGrip)) {
             HIThemeGrowBoxDrawInfo gdi;
             gdi.version = qt_mac_hitheme_version;
@@ -5398,6 +5438,7 @@
             const bool usingYosemiteOrLater = QSysInfo::MacintoshVersion > QSysInfo::MV_10_9;
             const bool isHorizontal = slider->orientation == Qt::Horizontal;
 
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
             if (cc == CC_ScrollBar && proxy()->styleHint(SH_ScrollBar_Transient, opt, widget)) {
                 bool wasActive = false;
                 CGFloat opacity = 0.0;
@@ -5560,7 +5601,9 @@
 
                 [NSGraphicsContext restoreGraphicsState];
                 CGContextRestoreGState(cg);
-            } else {
+            } else
+#endif
+            {
                 d->stopAnimation(opt->styleObject);
 
                 if (usingYosemiteOrLater && cc == CC_Slider) {
@@ -5594,24 +5637,11 @@
                         QCocoaWidgetKind sliderKind = slider->orientation == Qt::Horizontal ? QCocoaHorizontalSlider : QCocoaVerticalSlider;
                         QCocoaWidget cw = QCocoaWidget(sliderKind, QAquaSizeLarge);
                         NSSlider *sl = (NSSlider *)d->cocoaControl(cw);
-                        sl.minValue = slider->minimum;
-                        sl.maxValue = slider->maximum;
-                        sl.intValue = slider->sliderValue;
-                        sl.enabled = slider->state & QStyle::State_Enabled;
-                        d->drawNSViewInRect(cw, sl, opt->rect, p, widget != 0, ^(NSRect rect, CGContextRef ctx) {
-                                                if (slider->upsideDown) {
-                                                    if (isHorizontal) {
-                                                        CGContextTranslateCTM(ctx, rect.size.width, 0);
-                                                        CGContextScaleCTM(ctx, -1, 1);
-                                                    }
-                                                } else if (!isHorizontal) {
-                                                    CGContextTranslateCTM(ctx, 0, rect.size.height);
-                                                    CGContextScaleCTM(ctx, 1, -1);
-                                                }
-                                                [sl.cell drawBarInside:NSRectFromCGRect(tdi.bounds) flipped:NO];
-                                                // No need to restore the CTM later, the context has been saved
-                                                // and will be restored at the end of drawNSViewInRect()
-                                            });
+                        [sl setMinValue: slider->minimum];
+                        [sl setMaxValue: slider->maximum];
+                        [sl setIntValue: slider->sliderValue];
+                        [sl setEnabled: slider->state & QStyle::State_Enabled];
+                        d->drawNSViewInRect(cw, sl, opt->rect, p, widget != 0);
                         tdi.attributes |= kThemeTrackHideTrack;
                     } else {
                         tdi.attributes &= ~(kThemeTrackShowThumb | kThemeTrackHasFocus);
@@ -5841,6 +5871,11 @@
                 uint sc = SC_TitleBarMinButton;
                 ThemeTitleBarWidget tbw = kThemeWidgetCollapseBox;
                 bool active = titlebar->state & State_Active;
+                if (QSysInfo::macVersion() < QSysInfo::MV_10_6) {
+                    int border = 2;
+                    titleBarRect.origin.x += border;
+                    titleBarRect.origin.y -= border;
+                }
 
                 while (sc <= SC_TitleBarCloseButton) {
                     if (sc & titlebar->subControls) {
@@ -5979,12 +6014,23 @@
                         path.addRoundedRect(QRectF(tb->rect.x(), tb->rect.y(), tb->rect.width(), tb->rect.height() + 4), 4, 4);
                         p->setRenderHint(QPainter::Antialiasing);
                         p->fillPath(path, brush);
-                    } else {
+                    } else if (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_5) {
                         static QPixmap pm(QLatin1String(":/qt-project.org/mac/style/images/leopard-unified-toolbar-on.png"));
                         p->save();
                         p->setRenderHint(QPainter::SmoothPixmapTransform);
                         QStyleHelper::drawBorderPixmap(pm, p, tb->rect, 2, 2, 2, 2);
                         p->restore();
+                    } else {
+                        QPen oldPen = p->pen();
+                        p->setPen(QColor(0, 0, 0, 0x3a));
+                        p->fillRect(tb->rect.adjusted(1, 1, -1, -1), QColor(0, 0, 0, 0x12));
+                        p->drawLine(tb->rect.left() + 1, tb->rect.top(),
+                                    tb->rect.right() - 1, tb->rect.top());
+                        p->drawLine(tb->rect.left() + 1, tb->rect.bottom(),
+                                    tb->rect.right() - 1, tb->rect.bottom());
+                        p->drawLine(tb->rect.topLeft(), tb->rect.bottomLeft());
+                        p->drawLine(tb->rect.topRight(), tb->rect.bottomRight());
+                        p->setPen(oldPen);
                     }
                 }
                 proxy()->drawControl(CE_ToolButtonLabel, opt, p, widget);
@@ -6137,7 +6183,10 @@
             HIRect macSBRect = qt_hirectForQRect(sb->rect);
             ControlPartCode part;
             bool reverseHorizontal = (sb->direction == Qt::RightToLeft
-                                      && sb->orientation == Qt::Horizontal);
+                                      && sb->orientation == Qt::Horizontal
+                                      && (!sb->upsideDown ||
+                                          (QSysInfo::MacintoshVersion >= QSysInfo::MV_10_4
+                                                      && sb->upsideDown)));
             if (HIThemeHitTestScrollBarArrows(&macSBRect, &sbi, sb->orientation == Qt::Horizontal,
                         &pos, 0, &part)) {
                 if (part == kControlUpButtonPart)
